name: Linux build
on:
  push:
    branches: [ "main", "dist"]
    paths:
      - "**.cc"
      - "**.h"
      - "**.hh"
      - "**/cmake-linux.yml"
  pull_request:
    branches: [ "main" ]
    paths:
      - "**.cc"
      - "**.h"
      - "**.hh"
      - "**/cmake-linux.yml"

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    
    - name: checkout all the submodules
      uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Install dependences
      run: |
        apt-get install ninja-build
        wget https://github.com/protocolbuffers/protobuf/releases/download/v21.12/protobuf-cpp-3.21.12.tar.gz
        tar -xf protobuf-cpp-3.21.12.tar.gz
        cd protobuf-3.21.21
        mkdir build
        cd build
        cmake .. -GNinja
        cmake --build . --parallel $(nproc)
        cmake --install .
      shell: bash

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: | 
        cd ${{ github.workspace }}
        ls
        mkdir build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} 1>/dev/null
      shell: bash

    - name: Build Mmkv Server
      # Build your program with the given configuration
      run: |
        cd ${{github.workspace}}/build
        cmake --build . --target mmkv-server --parallel $(nproc) 1>/dev/null
      shell: bash

    - name: Build Mmkv Cli
      # Build your program with the given configuration
      run: |
        cd ${{github.workspace}}/build
        cmake --build . --target mmkv-cli --parallel $(nproc) 1>/dev/null
      shell: bash
