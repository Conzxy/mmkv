name: Linux-Release

on:
  workflow_dispatch:
    inputs:
      tag_version:
        description: "Version of mmkv"
        type: string
        required: true
      
env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - name: checkout all the submodules
      uses: actions/checkout@v3
      with:
        submodules: recursive

    # - name: Install dependences
    #   run: |
    #     cd ~
    #     wget https://www.lua.org/ftp/lua-5.4.4.tar.gz
    #     tar -xf lua-5.4.4.tar.gz
    #     cd lua-5.4.4
    #     make -j$(nproc) 1>/dev/null && sudo make install
    #   shell: bash

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: | 
        cd ${{ github.workspace }}
        ls
        mkdir build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} 1>/dev/null
      shell: bash

    - name: Build Mmkv Server
      # Build your program with the given configuration
      run: |
        cd ${{github.workspace}}/build
        cmake --build . --target mmkv-server --parallel $(nproc) 1>/dev/null
      shell: bash

    - name: Build Mmkv Cli
      # Build your program with the given configuration
      run: |
        cd ${{github.workspace}}/build
        cmake --build . --target mmkv-cli --parallel $(nproc) 1>/dev/null
      shell: bash
    
    - name: Make binary package
      run : |
        cd ${{github.workspace}}/bin
        tar -czvf mmkv-${inputs.tag_version}}-linux-bin.tar.gz mmkv-server mmkv-cli mmkvconf.lua ../LICENSE
        zip mmkv-${{inputs.tag_version}}-linux-bin.zip mmkv-server mmkv-cli mmkvconf.lua ../LICENSE
        ls .
      shell: bash
  
    - name: Make Release v${{inputs.tag_version}}
      uses: ncipollo/release-action@v1
      with:
        allowUpdates: true
        artifactErrorsFailBuild: true
        draft: true
        tag: v${{inputs.tag_version}}
        artifacts: ${{github.workspace}}/bin/mmkv-${{inputs.tag_version}}-linux-bin.*
        #removeArtifacts: true
        bodyFile: release/v${{inputs.tag_version}}.md
        token: ${{secrets.release}}
