name: Win-Release

on:
  push:
    branches: ["main", "dist"]
    tags: 
      - "v*.*.*"

  pull_request:
    tags: 
      - "v*.*.*"
    branches: ["main", "dist"]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  TAG_VERSION: 1.1.2
jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-latest
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v3

    - name: checkout all the submodules
      uses: actions/checkout@v3
      with:
        submodules: recursive

    # - name: Install dependences
    #   run: |
    #     cd ~
    #     wget https://www.lua.org/ftp/lua-5.4.4.tar.gz
    #     tar -xf lua-5.4.4.tar.gz
    #     cd lua-5.4.4
    #     make -j$(nproc) 1>/dev/null && sudo make install
    #   shell: bash

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: | 
        cd ${{ github.workspace }}
        ls
        mkdir build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
      shell: pwsh

    # - name: Build Mmkv Server
    #   # Build your program with the given configuration
    #   run: |
    #     cd ${{github.workspace}}/build
    #     cmake --build . --target mmkv-server --parallel $(nproc)
    #   shell: pwsh

    - name: Build Mmkv Cli
      # Build your program with the given configuration
      run: |
        cd ${{github.workspace}}/build
        cmake --build . --target mmkv-cli --parallel $(nproc)
      shell: pwsh 
    
    - name: Install zip
      uses: montudor/action-zip@v1.0.0

    - name: Make binary package
      run: zip mmkv-${{env.TAG_VERSION}}-win-bin.zip mmkv-cli ../LICENSE
      working-directory: bin
      shell: pwsh
  
    - name: Make Release v${{env.TAG_VERSION}}
      uses: ncipollo/release-action@v1
      with:
        allowUpdates: true
        artifactErrorsFailBuild: true
        draft: true
        tag: v${{env.TAG_VERSION}}
        artifacts: ${{github.workspace}}/bin/mmkv-${{env.TAG_VERSION}}-win-bin.*
        removeArtifacts: true
        bodyFile: release/v${{env.TAG_VERSION}}.md
        token: ${{secrets.release}}
